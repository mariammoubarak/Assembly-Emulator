include irvine32.inc

.data
yes byte "YES",0
no  byte "NO",0
answer byte ?
string byte 1000 dup(?)
movxByteSizeNotBigger byte "error A2149: byte register cannot be first operand",0
movxWordSizeNotBigger byte "error A2149: word register cannot be first operand",0
movxBothRegistersAreEqual byte "error A2070: invalid instruction operands",0
ImmediateOperandNotValid byte "error A2001: immediate operand not allowed",0
movMemoryToMemoryOperandNotValid byte "error A2070: invalid instruction operands",0
ESPnotValid byte "Invalid Register Use",0

operandsValArr dword 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0
;operandsStrArr byte "EAX", "EBX", "ECX", "EDX", "EDI", "ESI", "EBP", "AX","BX", "CX", "DX", "DI", "SI", "BP", "AL", "AH", "BL", "BH", "CL", "CH", "DL", "DH",0

movxMemoryOperandNotValid byte "error A2000: memory operand not allowed",0

bit32 dword ?
bit16 word ?
bit8h byte ?
bit8l byte ?
operand1Index dword ?
operand2Index dword ?

operandSizeNotValid byte "error A2070: invalid instruction operands",0
instruction byte 20 dup(?)
operand1 byte 8 dup(?)
operand2 byte 8 dup(?)



instructionSize dword ?
operand1Size    dword ?
operand2Size    dword ?
memoryTemp1 byte ?
memoryTemp2 byte ?
immediateTemp byte ?
wordcount word 1
spacecount word 0

warnMessag byte "Warning: The result of this operation wonâ€™t fit in the specified destination, would you still like to continue? (Y/N)",0

.code
main proc
clc
call warningProc
mov ecx,100
 mov edx,offset string
 call readString

  call splitting
  mov edx,offset instruction
  call writestring
   call crlf

   mov edx,offset operand1
  call writestring
   call crlf

   mov edx,offset operand2
  call writestring
   call crlf

   call getOperand1
   call getOperand2

   mov eax, operand1Index
  call writedec
   call crlf

   mov eax, operand2Index
  call writedec
   call crlf

   ;call isMov
   call dumpregs
	exit
	   
main endp
;******************************************************************Warning Proc*******************************************************************
warningProc proc

jnc endd
mov edx, offset warnMessag
call writestring

mov ecx,3
mov edx, offset answer
call readstring


mov ecx, eax
;convert user's answer to upper always
ToUpper:
       and byte ptr[edx], 11011111b
	   inc edx
loop ToUpper	    
cld
mov ecx, eax
mov esi, offset yes
mov edi, offset answer
repe cmpsb 
je endd

call dumpregs
exit
endd:
 
RET
warningProc endp
;******************************************************************End of warning Proc*******************************************************************
;******************************************************************Start of StackRegNotValid Proc*******************************************************************

StackRegNotValid Proc
  mov edx, offset ESPnotValid
  call writestring
  call crlf
  exit
  Ret
StackRegNotValid ENDP
;******************************************************************End of StackRegNotValid Proc*******************************************************************

;******************************************************************Start of getOperand1 Proc*******************************************************************
getOperand1 Proc

mov ecx,operand1Size

mov esi, offset operand1  ;index 0
mov edi, offset operand1  ;index 2
add edi,2
mov ebx, offset operand1  ;index 1
add ebx,1

cmp ecx,3
je bytes3regs

cmp ecx,2
je bytes2regs


bytes3regs:

mov al, 'e'
cmp al, byte ptr [esi]
jne immOrMem

mov al,'x'
cmp al, byte ptr [edi]
jne ediOrEsi

mov al,'a'
cmp al, byte ptr [ebx]  ;eax
je isEax

mov al,'b'
cmp al, byte ptr [ebx]  ;ebx
je isEbx


mov al,'c'
cmp al, byte ptr [ebx]  ;ecx
je isEcx


mov al,'d'
cmp al, byte ptr [ebx]  ;edx
je isEdx


ediOrEsi:
mov al, 'i'
cmp al,byte ptr [edi]
jne ebpOrEsp

mov al,'s'

cmp al, byte ptr [ebx]   ;esi
je isEsi


mov al, 'd'
cmp al, byte ptr [ebx]     ;edi
je isEdi


ebpOrEsp:
mov al,'p'

cmp al, byte ptr [edi]
jne immOrMem

mov al,'s'
sub esi,1
cmp al, byte ptr [ebx]   ;esp
je isEsp


mov al, 'b'
cmp al, byte ptr [ebx]     ;ebp
je isEbp


bytes2regs:

mov al ,'x'
cmp al, byte ptr [ebx]
jne LorH

mov al ,'a'

cmp al, byte ptr [esi]  ;ax
je isAx
   

mov al ,'b'
cmp al, byte ptr [esi]   ;bx
je isBx


mov al ,'c'
cmp al, byte ptr [esi]   ;cx
je isCx


mov al ,'d'
cmp al, byte ptr [esi]    ;dx
je isDx
    

LorH:
mov al, 'l'
cmp al, byte ptr [esi+1]
jne Hregs

mov al ,'a'
cmp al, byte ptr [esi]   ;al
je isAl


mov al ,'b'
cmp al, byte ptr [esi]    ;bl
je isBl


mov al ,'c'
cmp al, byte ptr [esi]   ;cl
je isCl



mov al ,'d'
cmp al, byte ptr [esi]  ;dl
je isDl


Hregs:
mov al, 'h'
cmp al, byte ptr [esi+1]
jne iorp

mov al ,'a'
cmp al, byte ptr [esi]    ;ah
je isAh


mov al ,'b'
cmp al, byte ptr [esi]     ;bh
je isBh


mov al ,'c'
cmp al, byte ptr [esi]       ;ch
je isCh



mov al ,'d'
cmp al, byte ptr [esi]     ;dh
je isDh

iorp:
mov al , 'i'
cmp al, byte ptr [ebx]
jne p

mov al , 's'
cmp al, byte ptr [esi]
je isSi

mov al, 'd'
cmp al, byte ptr [esi]
je isDi

p:
mov al , 'p'
cmp al, byte ptr [ebx]
jne immOrMem

mov al , 'b'
cmp al, byte ptr [esi]
je isBp

mov al, 's'
cmp al, byte ptr [esi]
je isSp

immOrMem:
call memoryOrImmediate
jmp toend

isEax:
  mov operand1Index, 0
  mov bit32, 0
  mov bit16,28
  mov bit8l,56
  mov bit8h,72

jmp toend

isEbx:
   mov operand1Index, 4
   mov bit32, 4
  mov bit16,32
  mov bit8l,60
  mov bit8h,76
jmp toend

isEcx:
  mov operand1Index, 8
  mov bit32, 8
  mov bit16,36
  mov bit8l,64
  mov bit8h,80
jmp toend

isEdx:
  mov operand1Index, 12
  mov bit32, 12
  mov bit16,40
  mov bit8l,68
  mov bit8h,84
jmp toend

isEsi:
  mov operand1Index, 16
  mov bit32, 16
  mov bit16,44
  
jmp toend

isEdi:
  mov operand1Index, 20
  mov bit32,20
  mov bit16,48

jmp toend

isEsp:
  call StackRegNotValid

jmp toend

isEbp:
  mov operand1Index, 24
  mov bit32,24
  mov bit16,52
jmp toend


isAx:
  mov operand1Index, 28
  mov bit32,0
  mov bit16,28
  mov bit8l,56
  mov bit8h,72
jmp toend

isBx:
  mov operand1Index, 32
  mov bit32,4
  mov bit16,32
  mov bit8l,60
  mov bit8h,76
jmp toend

isCx:
  mov operand1Index, 36
  mov bit32, 8
  mov bit16,36
  mov bit8l,64
  mov bit8h,80
jmp toend

isDx:
  mov operand1Index, 40
  mov bit32, 12
  mov bit16,40
  mov bit8l,68
  mov bit8h,84
jmp toend

isAl:
  mov operand1Index, 56
  mov bit32,0
  mov bit16,28
  mov bit8l,56
  mov bit8h,72
jmp toend 

isBl:
  mov operand1Index, 60
  mov bit32,4
  mov bit16,32
  mov bit8l,60
  mov bit8h,76
jmp toend

isCl:
  mov operand1Index, 64
  mov bit32, 8
  mov bit16,36
  mov bit8l,64
  mov bit8h,80
jmp toend

isDl:
  mov operand1Index, 68
  mov bit32, 12
  mov bit16,40
  mov bit8l,68
  mov bit8h,84
jmp toend

isAh:
  mov operand1Index, 72
  mov bit32,0
  mov bit16,28
  mov bit8l,56
  mov bit8h,72
jmp toend

isBh:
  mov operand1Index, 76
  mov bit32,4
  mov bit16,32
  mov bit8l,60
  mov bit8h,76
jmp toend

isCh:
  mov operand1Index, 80
  mov bit32, 8
  mov bit16,36
  mov bit8l,64
  mov bit8h,80
jmp toend

isDh:
  mov operand1Index, 84
  mov bit32, 12
  mov bit16,40
  mov bit8l,68
  mov bit8h,84
jmp toend


isSi:
  mov operand1Index, 44
  mov bit32, 16
  mov bit16,44
jmp toend

isDi:
  mov operand1Index, 48
  mov bit32,20
  mov bit16,48
jmp toend


isSp:
  call StackRegNotValid 
jmp toend


isBp:
  mov operand1Index, 52
  mov bit32,24
  mov bit16,52
jmp toend


toend:

RET
getOperand1 ENDP
;******************************************************************End of getOperand1 Proc*******************************************************************

;******************************************************************Start of getOperand2 Proc*******************************************************************
getOperand2 Proc

mov ecx,operand2Size

mov esi, offset operand2  ;index 0
mov edi, offset operand2  ;index 2
add edi,2
mov ebx, offset operand2  ;index 1
add ebx,1

cmp ecx,3
je bytes3regs

cmp ecx,2
je bytes2regs


bytes3regs:

mov al, 'e'
cmp al, byte ptr [esi]
jne immOrMem

mov al,'x'
cmp al, byte ptr [edi]
jne ediOrEsi

mov al,'a'
cmp al, byte ptr [ebx]  ;eax
je isEax

mov al,'b'
cmp al, byte ptr [ebx]  ;ebx
je isEbx


mov al,'c'
cmp al, byte ptr [ebx]  ;ecx
je isEcx


mov al,'d'
cmp al, byte ptr [ebx]  ;edx
je isEdx


ediOrEsi:
mov al, 'i'
cmp al,byte ptr [edi]
jne ebpOrEsp

mov al,'s'

cmp al, byte ptr [ebx]   ;esi
je isEsi


mov al, 'd'
cmp al, byte ptr [ebx]     ;edi
je isEdi


ebpOrEsp:
mov al,'p'

cmp al, byte ptr [edi]
jne immOrMem

mov al,'s'
sub esi,1
cmp al, byte ptr [ebx]   ;esp
je isEsp


mov al, 'b'
cmp al, byte ptr [ebx]     ;ebp
je isEbp


bytes2regs:

mov al ,'x'
cmp al, byte ptr [ebx]
jne LorH

mov al ,'a'

cmp al, byte ptr [esi]  ;ax
je isAx
   

mov al ,'b'
cmp al, byte ptr [esi]   ;bx
je isBx


mov al ,'c'
cmp al, byte ptr [esi]   ;cx
je isCx


mov al ,'d'
cmp al, byte ptr [esi]    ;dx
je isDx
    

LorH:
mov al, 'l'
cmp al, byte ptr [esi+1]
jne Hregs

mov al ,'a'
cmp al, byte ptr [esi]   ;al
je isAl


mov al ,'b'
cmp al, byte ptr [esi]    ;bl
je isBl


mov al ,'c'
cmp al, byte ptr [esi]   ;cl
je isCl



mov al ,'d'
cmp al, byte ptr [esi]  ;dl
je isDl


Hregs:
mov al, 'h'
cmp al, byte ptr [esi+1]
jne iorp

mov al ,'a'
cmp al, byte ptr [esi]    ;ah
je isAh


mov al ,'b'
cmp al, byte ptr [esi]     ;bh
je isBh


mov al ,'c'
cmp al, byte ptr [esi]       ;ch
je isCh



mov al ,'d'
cmp al, byte ptr [esi]     ;dh
je isDh

iorp:
mov al , 'i'
cmp al, byte ptr [ebx]
jne p

mov al , 's'
cmp al, byte ptr [esi]
je isSi

mov al, 'd'
cmp al, byte ptr [esi]
je isDi

p:
mov al , 'p'
cmp al, byte ptr [ebx]
jne immOrMem

mov al , 'b'
cmp al, byte ptr [esi]
je isBp

mov al, 's'
cmp al, byte ptr [esi]
je isSp

immOrMem:
call memoryOrImmediate
jmp toend

isEax:
  mov operand2Index, 0
jmp toend

isEbx:
   mov operand2Index, 4
jmp toend

isEcx:
  mov operand1Index, 8
  
jmp toend

isEdx:
  mov operand2Index, 12
  
jmp toend

isEsi:
  mov operand2Index, 16
  
jmp toend

isEdi:
  mov operand2Index, 20
jmp toend

isEsp:
  call StackRegNotValid

jmp toend

isEbp:
  mov operand2Index, 24
  
jmp toend


isAx:
  mov operand2Index, 28
  
jmp toend

isBx:
  mov operand2Index, 32
  
jmp toend

isCx:
  mov operand2Index, 36
  
jmp toend

isDx:
  mov operand2Index, 40
  
jmp toend

isAl:
  mov operand2Index, 56
  
jmp toend 

isBl:
  mov operand2Index, 60
 
jmp toend

isCl:
  mov operand2Index, 64
  
jmp toend

isDl:
  mov operand2Index, 68
  
jmp toend

isAh:
  mov operand2Index, 72
  
jmp toend

isBh:
  mov operand2Index, 76
  
jmp toend

isCh:
  mov operand2Index, 80
  
jmp toend

isDh:
  mov operand2Index, 84
  
jmp toend


isSi:
  mov operand2Index, 44
  
jmp toend

isDi:
  mov operand2Index, 48
  
jmp toend


isSp:
  call StackRegNotValid 
jmp toend


isBp:
  mov operand2Index, 52
  
jmp toend


toend:

RET
getOperand2 ENDP
;******************************************************************End of getOperand2 Proc*****************************************************

;******************************************************************Start of Splitting Proc*******************************************************************

splitting PROC
mov ecx,eax
mov ebx,offset instruction
mov esi,offset operand1
mov edi,offset operand2

splitString:
     mov al,[edx]
	 cmp al,' '
	 je equalcondition

	 cmp al,','
	 je equalcondition

	 cmp al,';'
	 je stoplooping

	 mov spacecount,0
	 cmp wordcount,1
	 jne operand1check
	 mov [ebx],al
	 inc ebx
	 inc instructionSize
	 jmp enditeration

	 operand1check:
	 cmp wordcount,2
	 jne operand2check
	 mov [esi],al
	 inc operand1Size
	 inc esi
	 jmp enditeration

	 operand2check:
	 mov [edi],al
	 inc operand2Size
	 inc edi
	 jmp enditeration

	 equalcondition:
	 inc spacecount
	 cmp spacecount,1
	 jne enditeration
	 inc wordcount
	 jmp enditeration

     stoplooping:
	 mov ecx,1

     enditeration:
	 inc edx

loop splitString

mov edx,offset instruction
mov al,[edx]
cmp al,'c'
je extension
cmp al,'C'
je extension
jmp toend
extension:
add edx,4
mov al,' '
mov [edx],al
inc edx
mov ecx,operand1Size
mov ebx,offset operand1
extend:
   mov al,[ebx]
   mov [edx],al
   mov al,' '
   mov [ebx],al
   inc edx
   inc ebx
loop extend
 
toend:

RET
splitting ENDP
;******************************************************************End of Splitting Proc*******************************************************************

;******************************************************************Start of ImmediateNotValid Error*******************************************************************
ImmediateNotValid proc
mov edx, offset ImmediateOperandNotValid;
call writestring
call crlf
exit
ImmediateNotValid endp
;******************************************************************End of ImmediateNotValid Error*******************************************************************

;******************************************************************Start of memoryOrImmediate instruction*******************************************************************

memoryOrImmediate PROC

mov al, byte ptr operand1

cmp al,24h ;$
je memory

cmp al,40h ;@
je memory

cmp al,5Fh ;_
je memory

cmp al, 30h ;0
je immediate

cmp al, 41h ;A
jl immediate

cmp al, 5Ah ;Z
jle memory

cmp al,61h ;a
jl immediate

cmp al, 74h ;z
jle memory



immediate:
call ImmediateNotValid;



memory:
mov cl, operand1
mov memoryTemp1,cl
;call movMemory
jmp endd


endd:
ret
memoryOrImmediate ENDP
;******************************************************************End of memoryOrImmediate Proc************************************************
;******************************************************************Start of checkSizes Proc************************************************************
checkSizes Proc
;cmp operand1Index,0
;ja

checkSizes endp
;******************************************************************End of checkSizes Proc************************************************************

;******************************************************************Start of isMovReg Proc************************************************************
isMovReg Proc
call checkSizes

;mov eax, operandsValArr[operand2Index]
;mov operandsValArr[operand1Index], eax

;call extendMoves
isMovReg endp
;******************************************************************End of isMovReg Proc************************************************************

end main


